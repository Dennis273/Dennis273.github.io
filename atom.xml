<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dennis' Blog]]></title>
  <link href="https://dennis273.github.io/atom.xml" rel="self"/>
  <link href="https://dennis273.github.io/"/>
  <updated>2019-03-05T10:51:03+08:00</updated>
  <id>https://dennis273.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[软件的本质与软件工程科学]]></title>
    <link href="https://dennis273.github.io/15516874150478.html"/>
    <updated>2019-03-04T16:16:55+08:00</updated>
    <id>https://dennis273.github.io/15516874150478.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">软件工程的本质</h2>

<p>在 GB/T11457=2006 国家标准中，软件工程被定义为：</p>

<blockquote>
<p>应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度，实现满足用户要求的软件产品的定义、开发、和维护的工程或进行研究的学科</p>
</blockquote>

<p>其本质是在软件开发中将系统化的、规范的、可度量的方法应用在开发、运行以及维护的过程中，从而一定程度地减轻软件本身性质带来的开发困难。</p>

<h2 id="toc_1">软件危机</h2>

<h3 id="toc_2">本质</h3>

<p>Fred Brooks 在其书中提出「软件」具有的四个与其他类型工程项目不同的属性：</p>

<ul>
<li>复杂性</li>
<li>一致性</li>
<li>可变形</li>
<li>不可视性</li>
</ul>

<p>以下翻译自 <a href="https://www.sebokwiki.org/wiki/The_Nature_of_Software">The Nature of Software</a> 中对应条目的解释。</p>

<h4 id="toc_3">复杂性</h4>

<p>软件的复杂性来源于软件系统中大量组成部分之间的交互。这些组件相互的不通来源于其被分装为「函数」、「子程序」或者是「对象」，并且按需调用已避免重复老同。软件组件有很多种交互方式，包括顺序调用或同时调用、状态转换、数据传递、数据库借口以及外部系统。</p>

<p>我们通常需要很多不同的设计表现来描述一个软件实体，以更好的展现软件中包含的大量静态结构、动态数据传递以及不通的交互模式。在这些组件，以及组件之间的复杂性要求我们进行大量严谨的设计以及回归测试。软件为各式各样的部件提供了功能性。软件可以实现从简单的控制程序到复杂的算法。</p>

<p>这种复杂性可能会导致许多隐藏的缺陷，从而使开发者需要重新进行大量的、未预期的开发工作。</p>

<h4 id="toc_4">一致性</h4>

<p>软件与其他硬件产品不一样，没有必须遵从的客观原则，例如牛顿运动定律。但是软件必须遵循与其内部组件、同一项目其他部分的接口以及其外部环境所表现出来的标准。编译器可以检测出如缺少分号这样的语法错误，但是我们在软件运行时很难找出由于程序逻辑或时序错误所导致的缺陷。</p>

<p>硬件实体与软件不同，可以容忍一定程度上的误差。这是其制造与组装的基础。没有任何两个硬件零件可以被完美地匹配，或是被要求能完美匹配。软件实体之间，或是软件实体与外部环境之间中没有与硬件相对应的对接口的容忍。例如并不存在一种指标说明软件接口的参数可以容忍 2% 的误差。软件接口的参数必须具有准确数量，准确类型的参数以完成数据对接。</p>

<p>缺乏一致性可能导致一些现存的软件组件无法被重用，因为其不能与开发中的差评具有一致性。这种缺乏一致性的现象可能会隐藏在项目中，直到后期开发中人们发现必须开发出其他组件来替代现有的无法重用的组件。为了解决这种问题我们需要安排未预期的资源，同时也会导致项目被延期。</p>

<h4 id="toc_5">可变性</h4>

<p>在一个软件密集的系统中，软件将引导硬件进行操作，并完成大部分的功能。因为软件在这种系统中是最容易进行改变的部分，所以它是最常被改变的部分。这种现象在项目开发的后期，以及项目的维护期是尤其明显的。但是这并不意味着很容易对软件进行变更。复杂性以及一致性可以使修改软件变成一项极其困难的任务。改变软件的部分组件可能会对软件的其他部分产生一些不好的副作用，从而需要对软件整体进行更多修改以时其能在最高效率下运行。</p>

<h4 id="toc_6">不可见性</h4>

<p>软件的不可见性来源于其没有物理属性。即使软件在计算机上运行的结果可以被观察到，软件本身是一种无形的存在，故无法被人类五感所感觉到。</p>

<p>例如需求文档、设计文档、源代码以及目标代码等工作产物是软件的一种表现形式，但是它们并不等价于软件。从最底层来说，软件存在于数码设备极大量的电子零件中的磁场与电流中。软件工程师必须通过不同程度的抽象以及不同形式的表现来尝试将这种无形存在变得可视化。</p>

<p>以上存在于软件开发最根源的的问题就是软件危机的本质</p>

<h3 id="toc_7">表现</h3>

<p>软件危机的表现有以下几个方面：</p>

<ul>
<li>项目运行超出预算</li>
<li>项目运行超过时间</li>
<li>软件质量低下</li>
<li>软件与需求不匹配</li>
<li>项目难以管理，代码难以维护</li>
</ul>

<h3 id="toc_8">解决办法</h3>

<h2 id="toc_9">软件生命周期</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试！]]></title>
    <link href="https://dennis273.github.io/15516788004554.html"/>
    <updated>2019-03-04T13:53:20+08:00</updated>
    <id>https://dennis273.github.io/15516788004554.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
</feed>
