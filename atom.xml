<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dennis' Blog]]></title>
  <link href="https://dennis273.github.io/atom.xml" rel="self"/>
  <link href="https://dennis273.github.io/"/>
  <updated>2019-06-20T00:16:41+08:00</updated>
  <id>https://dennis273.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[使用 Google App Engine 部署 Web 应用]]></title>
    <link href="https://dennis273.github.io/deploy-using-google-app-engine.html"/>
    <updated>2019-06-18T21:39:52+08:00</updated>
    <id>https://dennis273.github.io/deploy-using-google-app-engine.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">简介</h2>

<h3 id="toc_1">Google App Engine</h3>

<p><a href="https://cloud.google.com/appengine/">Google App Engine</a> 是 Google Cloud Platform 上的一个全托管的 Serverless 应用。相对于 Google Compute Engine 所提供的高性能虚拟机服务，使用 GAE 可以使开发者专注于应用开发，而不需关注与应用运行环境相关的配置、运维等工作。GAE 目前提供了多种语言的环境，包括 Go、PHP、Node.js、Java 等，同时也提供了标准环境以及柔性环境以应对不同的扩容策略。本文中将使用 GAE 的 柔性环境搭建 Node.js 的 Web 应用。</p>

<p><img src="media/15608651922143/15609323734695.jpg" alt="Goole App Engine"/></p>

<h3 id="toc_2">项目结构</h3>

<p>本次用于部署的项目是前后端分离的 Web 应用。前端使用的是 React，后端部分使用了 Express + MongoDB。MongDB 部分直接使用了 MongoDB Atlas 的免费集群，虽然有一定的限制但是作为简单的项目来说足够了。由于本文重点不在于搭建 Web 应用故不会详细解释项目具体实现。</p>

<h2 id="toc_3">部署至 GAE</h2>

<p>要使用 Google App Engine 首先需要注册 Google Cloud Platform 账户，在使用 GCP 服务时会根据产生的流量以及实例运行时间产生相应费用。GCP 有提供有效期一年的 300 USD 赠金，使用信用卡注册账户后可以自动获得（会产生相应税费）。</p>

<h3 id="toc_4">准备工作</h3>

<h4 id="toc_5">安装 Cloud SDK</h4>

<p>首先要先在开发机器上安装 Cloud SDK，可以在<a href="https://cloud.google.com/sdk/docs">此处</a>看到不同平台的安装文档。本文以 macOS 10.14 作为示例。<br/>
<img src="media/15608651922143/15609345174729.jpg" alt="Cloud SDK 安装文档"/></p>

<pre class="line-numbers"><code class="language-bash"># 下载
curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-245.0.0-darwin-x86_64.tar.gz

# 解压
tar zxvf ./google-cloud-sdk-245.0.0-darwin-x86_64.tar.gz

# 安装
cd google-cloud-sdk
chmod 755 ./install.sh
./install.sh

# 重新加载 shell
source ~/.zshrc
</code></pre>

<p>至此 Cloud SDK 就已经成功安装了！其后在正式运行和部署之前我们还需要新建项目并进行一些配置。</p>

<h4 id="toc_6">建立项目</h4>

<p>首先使用 Cloud SDK 在 shell 中登录 GCP 账户，SDK 会通过 Web 界面鉴权。</p>

<pre class="line-numbers"><code class="language-bash">// 登录
gcloud auth login
</code></pre>

<p><img src="media/15608651922143/15609360094468.jpg" alt="Cloud SDK 登录"/></p>

<p>成功登录后就可以开始创建新的项目了。</p>

<pre class="line-numbers"><code class="language-bash"># 创建项目并设置为默认项目
gcloud projects create [YOUR_PROJECT_NAME] --set-as-default
# 显示项目详情
gcloud projects describe [YOUR_PROJECT_NAME]
# 在项目中新建 App Engine 应用
gcloud app create --project=[YOUR_PROJECT_NAME]
</code></pre>

<p><img src="media/15608651922143/15609371556538.jpg" alt="选择区域"/><br/>
这里要选择 App Engine 部署的区域，此处我们选择 <code>[1]</code> (香港)。具体区域信息可以在这里<a href="https://cloud.google.com/compute/docs/regions-zones/">Google Cloud 区域和地区文档</a> 查看。</p>

<p>然后要在 Web 端的控制台为对应项目开启结算，链接为<a href="https://console.cloud.google.com/projectselector/billing?lang=nodejs&amp;st=true&amp;hl=zh-CN&amp;_ga=2.41128225.-247570783.1560860681">启用结算</a>。<br/>
<img src="media/15608651922143/15609385301227.jpg" alt="选择项目"/><br/>
<img src="media/15608651922143/15609409672845.jpg" alt="设置结算账号"/><br/>
这样就完成了项目的初始化，可以开始将我们的程序部署至 App Engine 了</p>

<p>App Engine 支持同一 App 包含多个 Service。在本项目中有前端以及 API 服务器两个 Service。</p>

<h4 id="toc_7">api-server 服务</h4>

<h5 id="toc_8"><code>app.yaml</code></h5>

<p>要将应用部署至 GAE，首先配置  <code>app.yaml</code> 文件。<br/>
该配置文件中可以配置关于 GAE App 的很多属性，包括网络、资源、实例自检、扩容策略以及环境变量等。具体的配置方法可以在 <a href="https://cloud.google.com/appengine/docs/flexible/nodejs/reference/app-yaml">app.yaml 配置文件</a>文档中查看。服务将会用到<code>runtime</code>、<code>service</code> 以及 <code>env_variables</code> 三个属性。</p>

<ul>
<li><code>runtime</code>：应用的运行环境，如 <code>nodejs&lt;version&gt;</code>、<code>python&lt;version&gt;</code>、<code>php&lt;version&gt;</code> 等；</li>
<li><code>service</code>：服务的名称；</li>
<li><code>env_variables</code>：环境变量。</li>
</ul>

<p>在 <code>api-server</code> 中我将使用 Node.js LTS 版本即 <code>nodejs10</code>，环境变量我需要用于生成 JWT Token 的密钥 <code>JWT_TOKEN</code> 以及用于连接数据库等 <code>MONGO_DB_URL</code>。<br/>
配置实例如下：</p>

<pre class="line-numbers"><code class="language-yaml">runtime: nodejs10
service: api-server
env_variables:
  JWT_KEY: [JWT_KEY]
  MONGO_DB_URL: [DATABASE_URL]
</code></pre>

<h5 id="toc_9"><code>package.json</code></h5>

<p>完成之后我们需要检查 <code>package.json</code> 中的 <code>start</code> 脚本。在应用被部署至 GAE 后，将会自动安装所有所有依赖（不包含 <code>devDependencies</code>），并运行 start 脚本。同时 GAE 不能正常运行如 <code>babel-node</code> 以及 <code>nodemon</code> 等程序，所以我们要确保 <code>start</code> 脚本中的内容是通过 <code>node</code> 启动，即内容为 <code>node [APP_ENTRY]</code>。</p>

<h5 id="toc_10"><code>.gcloudignore</code></h5>

<p>在部署应用至 GAE 时，为了避免传输大量文件，我们要将不需要用到的文件以及 <code>node_modules</code> 目录加入至  <code>.gcloudignore</code> 文件</p>

<h5 id="toc_11">部署</h5>

<p>至此我们可以开始将应用部署至 GAE。</p>

<pre class="line-numbers"><code class="language-bash"># 在应用根目录下运行
gcloud app deploy
</code></pre>

<p><img src="media/15608651922143/15609432895863.jpg" alt="部署错误"/><br/>
可以看到我们需要先部署一个 <code>default</code> 的服务才能部署其他服务。此处可以自由选择任意服务进行部署，只需移除 <code>app.yaml</code> 中 <code>service</code> 一项既可以部署为 <code>default</code>。此处我先将 <code>api-server</code> 服务设为 <code>default</code> 后重新运行部署命令即可成功部署。</p>

<h4 id="toc_12">front-end 服务</h4>

<p>本次前端项目是通过 <code>create-react-app</code> 构建的，其可以构建打包出静态文件。我们需要为构建出来的前端静态文件配置路由，除此之外其他配置基本与 <code>api-server</code> 部分相同。</p>

<h5 id="toc_13"><code>app.yaml</code></h5>

<p>由于静态资源文件不需要特定运行环境，所以可以自由选择。在示例中我们继续使用 <code>nodejs10</code>。除此之外路由部分也要在该文件中定义。定义路由时我们使用 <code>handlers</code> 属性。<code>handlers</code> 属性可以配置匹配到对应请求时对行为，具体文档请参考文档<a href="https://cloud.google.com/appengine/docs/standard/nodejs/config/appref#handlers_element">handlers 元素</a>。<br/>
前端资源目录如下：</p>

<pre class="line-numbers"><code class="language-text">build
├── index.html
├── favicon.ico
└── static
    ├──  js
    └── css
</code></pre>

<p>我们需要对请求 <code>&lt;domain&gt;/</code> 返回 <code>build/index.html</code>、对 <code>&lt;domain&gt;/favicon.ico</code> 返回 <code>build/favicon.ico</code> 、<code>&lt;domain&gt;/static/*</code> 返回 <code>static/*</code>。同时前端作为单页应用也要对其他路由返回 <code>index.html</code> 以防止刷新时返回 404 Not Found。</p>

<p><code>url</code> 字段使用正则表达式对请求路径进行匹配；<code>static_files</code> 字段是对应的文件，需要与 <code>upload</code> 同时使用；<code>static_dir</code> 则是路径对应的目录。</p>

<p>配置完成后的 <code>app.yaml</code> 文件如下：</p>

<pre class="line-numbers"><code class="language-yaml">runtime: nodejs10
service: front-end

handlers:
  - url: /
    static_files: build/index.html
    upload: build/index.html
  - url: /static
    static_dir: build/static
  - url: /[^/]\.[^/]*$
    static_dir: build
  - url: /.*
    static_files: build/index.html
    upload: build/index.html
</code></pre>

<h5 id="toc_14">部署</h5>

<p>配置完 <code>app.yaml</code> 以及 <code>.gcloudignore</code> 后就可以开始部署了，部署流程同 <code>api-server</code>。<br/>
<img src="media/15608651922143/15609470569455.jpg" alt="front-end 配置成功"/></p>

<h4 id="toc_15">服务管理</h4>

<p>接下来我们需要将不同请求转发给不同 Service 去处理。项目服务如下：</p>

<pre class="line-numbers"><code class="language-text">App 
├── front-end (&lt;domain&gt;/*)
└── api-server (&lt;domain&gt;/api/*)
</code></pre>

<p>要将不同的请求转发至不同 Service，可以为项目配置 <code>dispatch.yaml</code> 文件。该文件包含两种元素：<code>url</code> 以及 <code>service</code>。关于该文件的详细配置可以参考文档 <a href="https://cloud.google.com/appengine/docs/standard/nodejs/reference/dispatch-yaml">dispatch.yaml 配置文件</a>。</p>

<p>配置示例如下：</p>

<pre class="line-numbers"><code class="language-yaml">dispatch:
  - url: &#39;*/api/*&#39;
    service: api-server
  - url: &#39;display-project-1.appspot.com/*&#39;
    service: front-end
</code></pre>

<p>配置完成后将路由文件部署至 GAE，此时要注意配置文件中用到的 Service 都必须提前部署至 GAE。</p>

<pre class="line-numbers"><code class="language-bash">gcloud app deploy dispatch.yaml
</code></pre>

<p><img src="media/15608651922143/15609474151098.jpg" alt="成功部署路由文件"/></p>

<p>然后我们就可以在 GAE 的控制台页面看到各个服务以及对应的路由。<br/>
<img src="media/15608651922143/15609584339207.jpg" alt="GAE 控制台 - 服务"/><br/>
至此前后端两个服务以及路由都已经配置完毕了，访问项目分配的域名 [YOUR_PROJECT_ID].appspot.com 就可以进入 Web 应用。<br/>
<img src="media/15608651922143/15609604876715.jpg" alt="成功进入 Web 应用"/></p>

<h4 id="toc_16">调试</h4>

<p>当然实际开发过程中不可能那么顺利，在我们将应用部署至 GAE 后，有可能会遇到应用没有正常工作的情况。这个时候我们没办法像在开发机器或者虚拟机实例上那样使用各种手段进行调试。GAE 提供了一些途径供我们了解程序运行状况。</p>

<h5 id="toc_17">Stackdriver 日志</h5>

<p>从 Stackdriver 日志页面可以看到程序运行时的各种输出，可以观察到对请求的处理以及各种程序中的各种 log。<br/>
<img src="media/15608651922143/15609586332973.jpg" alt="Stackdriver 日志"/></p>

<h5 id="toc_18">Stackdriver 错误报告</h5>

<p>在 Stackdriver 错误报告页面可以看到服务运行时所产生的所有错误及其堆栈，并可以设置错误的状态以及配置程序自动重新加载。<br/>
<img src="media/15608651922143/15609585943343.jpg" alt="Stack Driver 错误报告"/></p>

<h5 id="toc_19">Stackdriver 调试</h5>

<p>在 Stackdriver 调试页面中可以对当前部署的代码进行快照。<br/>
<img src="media/15608651922143/15609594586086.jpg" alt="Stackdriver 调试"/></p>

<h3 id="toc_20">其他问题</h3>

<h4 id="toc_21">成员权限问题</h4>

<p>在写这篇文章的时候我又重新新建了一个 project 进行部署，在初次 deploy 时遇到了如下权限错误。<br/>
<img src="media/15608651922143/15609437674373.jpg" alt="权限问题"/><br/>
时候通过在 IAM 页面删除无权限的成员，然后在重新为其添加 Cloud Build 服务账号角色解决了这个问题。<br/>
<img src="media/15608651922143/15609598346753.jpg" alt="IAM 和管理"/></p>

<h2 id="toc_22">总结</h2>

<p>应该说 Google App Engine 提供了一个很好的应用部署方案，对于小型应用来说这种无服务器的配置可以减少运维以及部署的各种成本。而在应用需要进行扩容或者迭代更新时，GCP 提供的完整解决方案可以让开发者无缝迭代，也可以逐渐加入其他组件如 Google Cloud Storage，Firebase 等其他 Google 提供的云服务，直至迁移至 Kubernetes。我觉得 GAE 和通过 Docker 进行部署相比起来开发人员要配置的部分更少了，只需要通过简单的步骤就可以将应用部署至生产环境。</p>

<h2 id="toc_23">后记</h2>

<p>这篇文章是在前两天搞定 GAE 以及 Travis CI 的部署之后决定写的。本以为写文章的时候可以很快复现上次的成果，没想到又遇到了一大堆坑。实际上我不太会写文章，每次写的时候不是没东西可写就是感觉像在记流水账，不过这次大概是因为内容很多所以边写边在配置感觉还挺好玩的。其实本来打算一篇文章写完 GAE 和 Travis CI 的结果写不完，下次再来写 Travis CI 和 GAE 的 持续部署好了。或许以后还会用用看 Google Cloud Functions，全面拥抱 Serverless。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[领域建模 - 对象状态]]></title>
    <link href="https://dennis273.github.io/swsad-week9.html"/>
    <updated>2019-05-06T20:40:36+08:00</updated>
    <id>https://dennis273.github.io/swsad-week9.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1</h2>

<blockquote>
<p>使用类图，分别对 Asg_RH 文档中 Make Reservation 用例以及 Payment 用例开展领域建模。然后，根据上述模型，给出建议的数据表以及主要字段，特别是主键和外键</p>
</blockquote>

<h3 id="toc_1">make_reservation</h3>

<p><img src="media/15571464364168/1.png" alt="1"/></p>

<h3 id="toc_2">payment</h3>

<p><img src="media/15571464364168/2.png" alt="2"/></p>

<h2 id="toc_3">2</h2>

<blockquote>
<p>使用 UML State Model，对每个订单对象生命周期建模<br/>
建模对象： 参考 Asg_RH 文档， 对 Reservation/Order 对象建模。<br/>
建模要求： 参考练习不能提供足够信息帮助你对订单对象建模，请参考现在 定旅馆 的旅游网站，尽可能分析围绕订单发生的各种情况，直到订单通过销售事件（柜台销售）结束订单。</p>
</blockquote>

<p><img src="media/15571464364168/11.png" alt="11"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用例建模作业]]></title>
    <link href="https://dennis273.github.io/swsad-week7.html"/>
    <updated>2019-05-06T11:20:22+08:00</updated>
    <id>https://dennis273.github.io/swsad-week7.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">根据订旅馆建模文档</h2>

<h3 id="toc_1">功能分析</h3>

<ul>
<li>搜索旅馆
<ul>
<li>输入目标城市</li>
<li>通过列表选择目的地</li>
<li>选择 check-in 日期</li>
<li>选择住宿时间或 check-out 日期</li>
<li>根据条件对搜索结果进行排序</li>
</ul></li>
<li>预定旅馆
<ul>
<li>选择旅馆</li>
<li>选择 check-in 日期与住宿日期</li>
<li>选择人数</li>
<li>查看旅馆详细信息</li>
<li>添加至购物车
<ul>
<li>填写姓名与邮件地址</li>
</ul></li>
</ul></li>
<li>购物车
<ul>
<li>查看购物车内容</li>
<li>移除项目</li>
<li>查看预定详情</li>
<li>查看付款选项</li>
</ul></li>
<li>付款
<ul>
<li>使用信用卡付款
<ul>
<li>填写信用卡信息</li>
</ul></li>
</ul></li>
</ul>

<h3 id="toc_2">绘制用例图模型</h3>

<p><img src="media/15571128229891/Diagram%202019-05-06%2015-29-48.png" alt="用例图"/></p>

<h3 id="toc_3">用例的活动图</h3>

<p><img src="media/15571128229891/Diagram%202019-05-06%2020-05-39.png" alt="Diagram 2019-05-06 20-05-39"/></p>

<h2 id="toc_4">投递快递业务场景</h2>

<h4 id="toc_5">场景1</h4>

<p><img src="media/15571128229891/1.png" alt="1"/></p>

<h4 id="toc_6">场景2</h4>

<p><img src="media/15571128229891/2.png" alt="2"/></p>

<h4 id="toc_7">场景3</h4>

<p><img src="media/15571128229891/3.png" alt="3"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用例建模]]></title>
    <link href="https://dennis273.github.io/swsad-week6.html"/>
    <updated>2019-04-13T11:10:57+08:00</updated>
    <id>https://dennis273.github.io/swsad-week6.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">简答题</h2>

<h3 id="toc_1">用例的概念</h3>

<p>用例是软件工程或系统工程中对系统如何反应外界请求的描述，是一种通过用户的使用场景来获取需求的技术。<br/>
每个用例提供了一个或多个场景，该场景说明了系统是如何和最终用户或其它系统互动，也就是谁可以用系统做什么，从而获得一个明确的业务目标。</p>

<h3 id="toc_2">用例和场景的关系</h3>

<p>一个用例可以包含着许多场景，不同场景描述了该用例在不同情况下的交互方式。<br/>
主场景是用例中最基本的一个元素，是最主要的交互场景。</p>

<h3 id="toc_3">用例的形式</h3>

<ul>
<li>Brief</li>
<li>Casual</li>
<li>Fully</li>
</ul>

<h3 id="toc_4">对于复杂业务，为什么编制完整用例非常难？</h3>

<p>因为若业务较为复杂，则其场景以及功能点都会较多。这会导致自用例之间逻辑关系很难整理清楚。若是对此类业务进行用例分析会消耗大量时间。</p>

<h3 id="toc_5">用例图</h3>

<p>用例图是用户与系统交互的最简表示形式，展现了用户和与他相关的用例之间的关系。通过用例图，人们可以获知系统不同种类的用户和用例。</p>

<h3 id="toc_6">用例图的基本符号与元素</h3>

<ul>
<li>用例<br/>
用例描述系统为了实现用户的目标而执行的功能。用例必须产生对系统用户可视的结果，即，值。</li>
<li>参与者<br/>
参与者表示与正在建模的系统进行交互的用户的角色。该用户可以是某个人、某个组织、一台机器或者另一个外部系统。</li>
<li>子系统<br/>
在 UML 模型中，子系统是一种已建立构造型的组件，它表示系统中独立的行为单元。在类图、组件图和用例图中，子系统用来表示您正在建模的系统中的大型组件。</li>
<li>用例图中的关系<br/>
在 UML 中，关系是模型元素之间的连接。UML 关系是这样一种模型元素：它通过定义模型元素的结构和模型元素之间的行为来对模型添加语义。</li>
</ul>

<h3 id="toc_7">用例图的画法与步骤</h3>

<ul>
<li>定义系统的边界</li>
<li>在 UML 图中指定关系</li>
<li>扩展用例的行为</li>
</ul>

<h3 id="toc_8">用例图给利益相关人与开发者的价值</h3>

<p>使用用例图可以让开发者更加明确系统中各个用例。通过明确用例、参与者之间的关系能够更加清楚的理解需求，从而降低后续开发的风险，提高开发效率。</p>

<h2 id="toc_9">建模练习</h2>

<h3 id="toc_10">用例图</h3>

<ul>
<li><p>Booking.com <br/>
<img src="media/15551250573050/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-13%20%E4%B8%8B%E5%8D%888.35.25.png" alt="Booking.com"/></p></li>
<li><p>微信电影票<br/>
<img src="media/15551250573050/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-04-13%20%E4%B8%8B%E5%8D%888.45.37.png" alt="微信电影票"/></p></li>
</ul>

<h3 id="toc_11">为什么相似系统的用例图是相似的？</h3>

<p>因为相似的系统包含的主要功能是相同的，即其用例图必然会包含相同的用例。不同之处在于系统的创新之处。</p>

<h3 id="toc_12">如何利用不同时代、不同地区产品的用例图，展现、突出创新业务和技术</h3>

<p>用户操作是用户需求的最主要一部分。可以根据不同用户对功能的不同需求进行各种创新。</p>

<h3 id="toc_13">请使用 SCRUM 方法，选择一个用例图，编制某定旅馆开发的需求（backlog）开发计划表</h3>

<table>
<thead>
<tr>
<th style="text-align: center">用例</th>
<th style="text-align: center">story point</th>
<th style="text-align: center">优先级</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">旅馆搜索</td>
<td style="text-align: center">15</td>
<td style="text-align: center">中</td>
</tr>
<tr>
<td style="text-align: center">旅馆预订</td>
<td style="text-align: center">20</td>
<td style="text-align: center">高</td>
</tr>
<tr>
<td style="text-align: center">付款</td>
<td style="text-align: center">20</td>
<td style="text-align: center">高</td>
</tr>
<tr>
<td style="text-align: center">评价</td>
<td style="text-align: center">5</td>
<td style="text-align: center">低</td>
</tr>
</tbody>
</table>

<h3 id="toc_14">参考「使用用例点估算软件成本」，给出项目用例点的估算</h3>

<table>
<thead>
<tr>
<th style="text-align: center">用例</th>
<th style="text-align: center">#事务</th>
<th style="text-align: center">#计算</th>
<th style="text-align: center">原因</th>
<th style="text-align: center">UC 权重</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">旅馆搜索</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">旅馆预订</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">付款</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
<tr>
<td style="text-align: center">评价</td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
<td style="text-align: center"></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件项目过程模型与规划]]></title>
    <link href="https://dennis273.github.io/week3.html"/>
    <updated>2019-03-15T16:20:12+08:00</updated>
    <id>https://dennis273.github.io/week3.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">简述瀑布模型、增量模型、螺旋模型（含原型方法）的优缺点</h2>

<p>从项目特点、风险特征、人力资源利用角度思考</p>

<h3 id="toc_1">瀑布模型</h3>

<p>优点：</p>

<ul>
<li>可以减低软件开发复杂程度、提高软件开发过程的透明性、提高软件开发过程的可管理性；</li>
<li>推迟软件开发，强调了分析以及设计工作的重要性；</li>
<li>通过阶段评审以及文档作为手段对整个开发过程进行指导。</li>
</ul>

<p>缺点：</p>

<ul>
<li>强调过程活动的线形顺序;</li>
<li>缺乏灵活性，无法解决软件需求不明确时的问题；</li>
<li>风险控制能力较弱；</li>
<li>阶段之间规定过多文档时会增加系统的工作量；</li>
<li>只以文档完成情况评估项目进度可能会产生错误结论。</li>
</ul>

<h3 id="toc_2">增量模型</h3>

<p>优点：</p>

<ul>
<li>开发速度较快，有质量保证；</li>
<li>特别适用于信息管理系统。</li>
</ul>

<p>缺点：</p>

<ul>
<li>局限于信息管理系统</li>
<li>需要人力资源较多；</li>
<li>开发者和客户需要在短时间内完成需求分析；</li>
<li>模块化要求较高；</li>
</ul>

<h3 id="toc_3">螺旋模型（含原型方法）</h3>

<p>优点：</p>

<ul>
<li>具有风险管理机制，将瀑布模型中多个阶段转化为多个迭代过程；</li>
<li>可以应对复杂的功能需求以及开发中途需求的变化；</li>
</ul>

<p>缺点：</p>

<ul>
<li>其风险分析机制导致与外部客户沟通的苦难呢；</li>
<li>风险分析需要耗费的成本较大；</li>
<li>风险分析失误的后果严重。<br/>
## 简述统一过程三大特点，与面向对象的方法有什么关系？<br/>
特点：</li>
<li>用户为中心</li>
<li>架构为重心</li>
<li>风险驱动</li>
</ul>

<p>统一过程是面向对象的一种方法。</p>

<h2 id="toc_4">简述统一过程四个阶段的划分准则是什么？每个阶段关键的里程碑是什么？</h2>

<p>划分准则是每个阶段的任务。里程碑是每个阶段的任务的验收。</p>

<ul>
<li>初始阶段：生命周期的目标</li>
<li>细化阶段：生命周期的结构</li>
<li>构建阶段：初始运作能力</li>
<li>交付阶段：产品发布</li>
</ul>

<h2 id="toc_5">软件企业为什么能按固定节奏生产、固定周期发布软件产品？它给企业项目管理带来哪些好处？</h2>

<p>软件企业之所以能够按固定节奏生产发布产品，是因为其内部具有经过长时间验证的，公司人员严格遵守的软件生命周期管理以及软件开发模型。通过使用的软件开发模型中定义的各个阶段，开发人员能够明确当前应该完成的目标，以及能够高效、正确地完成与其他开发人员的写作。通过对软件开发风险的分析与控制，企业能够正确应对开发过程中遇到的需求变更等问题，按照计划等日程发布软件产品。<br/>
正确地使用了软件开发模型可以提高企业项目管理的效率，保证软件的质量以及控制成本。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件项目与知识团队管理基础]]></title>
    <link href="https://dennis273.github.io/15524421434659.html"/>
    <updated>2019-03-13T09:55:43+08:00</updated>
    <id>https://dennis273.github.io/15524421434659.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">对分析、设计的理解</h2>

<ul>
<li>分析指的是对软件需求的分析。通过与客户进行沟通，并理解客户对于软件的需求。设计则是根据需求对软件进行模块分解，以方便开发。</li>
</ul>

<h2 id="toc_1">面向对象的分析与设计的优势</h2>

<p>可以通过与现实世界中相同的逻辑快速且有效的设计出系统。</p>

<h2 id="toc_2">简述 UML（统一建模语言）的作用</h2>

<ul>
<li>需求分析人员可以绘制用例图，用于沟通需求；</li>
<li>设计人员可以用其绘制活动图、顺序图、类图用于概要设计以及详细设计；</li>
</ul>

<p>考试将会考察用例图、静态图、行为图、实现图。</p>

<h2 id="toc_3">从软件本质的角度，解释软件范围（需求）控制的可行性</h2>

<p>由于软件本身的复杂性、不可见性、不一致性以及可变形，软件范围在很多时候对于开发者以及客户都是模糊的。所以在开发阶段，软件产品是从不明确的需求开始开发，先完成较为清楚的需求，在日后迭代过程中继续完成剩余需求。</p>

<h2 id="toc_4">看板使用联系</h2>

<ul>
<li>可以通过将 Issue 分配至成员来明确任务分配；</li>
<li>通过 Pull Request 以及 Issue 可以看到阶段性结果；</li>
<li>将 Issue 移动至 In progress 栏可以表明当前正在执行的任务；</li>
</ul>

<p><img src="media/15524421434659/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-14%20%E4%B8%8A%E5%8D%8811.11.41.png" alt="KANBAN"/></p>

<h2 id="toc_5">UML 绘图工具练习</h2>

<p><img src="media/15524421434659/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-15%20%E4%B8%8B%E5%8D%883.50.11.png" alt="屏幕快照 2019-03-15 下午3.50.11"/><br/>
来源：「UML 和模式应用」， P179， 图15-34</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件的本质与软件工程科学]]></title>
    <link href="https://dennis273.github.io/15516874150478.html"/>
    <updated>2019-03-04T16:16:55+08:00</updated>
    <id>https://dennis273.github.io/15516874150478.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">软件工程的本质</h2>

<p>在 GB/T11457=2006 国家标准中，软件工程被定义为：</p>

<blockquote>
<p>应用计算机科学理论和技术以及工程管理原则和方法，按预算和进度，实现满足用户要求的软件产品的定义、开发、和维护的工程或进行研究的学科</p>
</blockquote>

<p>其本质是在软件开发中将系统化的、规范的、可度量的方法应用在开发、运行以及维护的过程中，从而一定程度地减轻软件本身性质带来的开发困难。</p>

<h2 id="toc_1">软件危机</h2>

<h3 id="toc_2">本质</h3>

<p>Fred Brooks 在其书中提出「软件」具有的四个与其他类型工程项目不同的属性：</p>

<ul>
<li>复杂性</li>
<li>一致性</li>
<li>可变形</li>
<li>不可视性</li>
</ul>

<p>以下翻译自 <a href="https://www.sebokwiki.org/wiki/The_Nature_of_Software">The Nature of Software</a> 中对应条目的解释。</p>

<h4 id="toc_3">复杂性</h4>

<p>软件的复杂性来源于软件系统中大量组成部分之间的交互。这些组件相互的不通来源于其被分装为「函数」、「子程序」或者是「对象」，并且按需调用已避免重复老同。软件组件有很多种交互方式，包括顺序调用或同时调用、状态转换、数据传递、数据库借口以及外部系统。</p>

<p>我们通常需要很多不同的设计表现来描述一个软件实体，以更好的展现软件中包含的大量静态结构、动态数据传递以及不通的交互模式。在这些组件，以及组件之间的复杂性要求我们进行大量严谨的设计以及回归测试。软件为各式各样的部件提供了功能性。软件可以实现从简单的控制程序到复杂的算法。</p>

<p>这种复杂性可能会导致许多隐藏的缺陷，从而使开发者需要重新进行大量的、未预期的开发工作。</p>

<h4 id="toc_4">一致性</h4>

<p>软件与其他硬件产品不一样，没有必须遵从的客观原则，例如牛顿运动定律。但是软件必须遵循与其内部组件、同一项目其他部分的接口以及其外部环境所表现出来的标准。编译器可以检测出如缺少分号这样的语法错误，但是我们在软件运行时很难找出由于程序逻辑或时序错误所导致的缺陷。</p>

<p>硬件实体与软件不同，可以容忍一定程度上的误差。这是其制造与组装的基础。没有任何两个硬件零件可以被完美地匹配，或是被要求能完美匹配。软件实体之间，或是软件实体与外部环境之间中没有与硬件相对应的对接口的容忍。例如并不存在一种指标说明软件接口的参数可以容忍 2% 的误差。软件接口的参数必须具有准确数量，准确类型的参数以完成数据对接。</p>

<p>缺乏一致性可能导致一些现存的软件组件无法被重用，因为其不能与开发中的差评具有一致性。这种缺乏一致性的现象可能会隐藏在项目中，直到后期开发中人们发现必须开发出其他组件来替代现有的无法重用的组件。为了解决这种问题我们需要安排未预期的资源，同时也会导致项目被延期。</p>

<h4 id="toc_5">可变性</h4>

<p>在一个软件密集的系统中，软件将引导硬件进行操作，并完成大部分的功能。因为软件在这种系统中是最容易进行改变的部分，所以它是最常被改变的部分。这种现象在项目开发的后期，以及项目的维护期是尤其明显的。但是这并不意味着很容易对软件进行变更。复杂性以及一致性可以使修改软件变成一项极其困难的任务。改变软件的部分组件可能会对软件的其他部分产生一些不好的副作用，从而需要对软件整体进行更多修改以时其能在最高效率下运行。</p>

<h4 id="toc_6">不可见性</h4>

<p>软件的不可见性来源于其没有物理属性。即使软件在计算机上运行的结果可以被观察到，软件本身是一种无形的存在，故无法被人类五感所感觉到。</p>

<p>例如需求文档、设计文档、源代码以及目标代码等工作产物是软件的一种表现形式，但是它们并不等价于软件。从最底层来说，软件存在于数码设备极大量的电子零件中的磁场与电流中。软件工程师必须通过不同程度的抽象以及不同形式的表现来尝试将这种无形存在变得可视化。</p>

<p>以上存在于软件开发最根源的的问题就是软件危机的本质</p>

<h3 id="toc_7">表现</h3>

<p>软件危机的表现有以下几个方面：</p>

<ul>
<li>项目运行超出预算</li>
<li>项目运行超过时间</li>
<li>软件质量低下</li>
<li>软件与需求不匹配</li>
<li>项目难以管理，代码难以维护</li>
</ul>

<h3 id="toc_8">解决办法</h3>

<ul>
<li>开发者能够正确认识计算机软件的内涵</li>
<li>采用工程项目管理方法实施软件开发的组织管理</li>
<li>采用成熟的软件开发技术和方法，开发和使用适当的软件工具</li>
</ul>

<h2 id="toc_9">软件生命周期</h2>

<p>软件生命周期指的是软件从产生直至成熟的全部过程。我们可以通过软件生命周期的管理来明确开发流程中的的阶段性任务。</p>

<p>软件生命周期的六个阶段：</p>

<ul>
<li>可行性分析与计划阶段</li>
<li>需求分析阶段</li>
<li>设计阶段</li>
<li>实现阶段</li>
<li>测试阶段</li>
<li>运行与维护阶段</li>
</ul>

<h2 id="toc_10">SWEBoK 的 15 个知识域</h2>

<h3 id="toc_11">Software Requirements</h3>

<p>软件需求：软件需求包括对需求的提出、交涉、分析、规划以及验证。如果软件需求分析环节没有正确的进行，将会导致软件较为脆弱。</p>

<h3 id="toc_12">Software Design</h3>

<p>软件设计：软件设计包括对软件架构、组件、接口以及其他系统的组成部分的定义。软件设计时软件生命周期的一部分。当我们完成需求分析后，需要对软件内部结构以及行为进行一个描述以作为之后开发的根据。</p>

<h3 id="toc_13">Software Construction</h3>

<p>软件构建：该部分是软件的实现部分。包含对软件的详细设计、编码、单元测试、集成测试、调试以及验证。</p>

<h3 id="toc_14">Software Testing</h3>

<p>软件测试：软件测试是对软件质量的评估，通过评估结果我们可以衡量软件的缺陷从而提升软件质量。其包含有限的测试案例以动态地对软件行为进行验证。</p>

<h3 id="toc_15">Software Maintenance</h3>

<p>软件维护：软件维护指的是对现有软件进行改善，或者进行修改以适应不同的工作环境，同时还包含对错误的修正。</p>

<h3 id="toc_16">Software Configuration Management</h3>

<p>软件配置管理：软件配置管理指的是对包括硬件、固件一集软件的整体配置。也可以被认为是用于某些目的而搭建的特定版本的硬件、固件一集软件的组合。</p>

<h3 id="toc_17">Software Engineering Management</h3>

<p>软件工程管理：该环节包括对软件开发的计划、协调、度量、报告以及控制，并一次来确保软件开发以及维护的过程是有秩序的、系统的、而且有质量保证。</p>

<h3 id="toc_18">Software Engineering Process</h3>

<p>软件工程实施：软件工程实施包含了对软件生命周期的定义、实现、评估、度量、管理以及改善。</p>

<h3 id="toc_19">Software Engineering Models and Methods</h3>

<p>软件工程模型与方法：其强调了再不同软件生命周期中共同成立的方法，包括对模型搭建的一些原则、对模型的分析方法等。</p>

<h3 id="toc_20">Software Quality</h3>

<p>软件质量：其包含了对软件工程文化、软件质量属性、质检的价值以及成本、软件质量的改善等。</p>

<h3 id="toc_21">Software Engineering Professional Practice</h3>

<p>软件开发专业实践：其包含了一些软件工程师必须掌握的知识、技巧以及态度。这些可以帮助我们进行专业的、负责任的软件开发。</p>

<h3 id="toc_22">Software Engineering Economics</h3>

<p>软件工程经济：包含对关于商业效果以及技术上的决策。涵盖软件工程经济（提案、现金流、时间成本等）。</p>

<h3 id="toc_23">Computing Foundations</h3>

<p>计算基础：计算背景的基础知识，包含解决问题的技巧、抽象、算法以及复杂度、编程基础、并行与分布式基础、计算机架构、操作系统、计算机网络。</p>

<h3 id="toc_24">Mathematical Foundations</h3>

<p>数学基础：数学基础包括集合、关系、函数。也包括逻辑、证明技巧、图与数、离散概率、语法、有限自动机、数论。</p>

<h3 id="toc_25">Engineering Foundations</h3>

<p>工程基础：工程基础包括：实践方法与实验技巧、数据分度量、工程设计、模拟、建模等。</p>

<h2 id="toc_26">简单解释 CMMI 的五个级别</h2>

<ul>
<li>Level 1: Initial，不可预计的、自发的、不受控的生成模式；</li>
<li>Level 2: Managed，大多数是自发的，有项目基础的生产模式；</li>
<li>Level 3: Defined，自主的、有组织基础的生产模式；</li>
<li>Level 4: Quantitatively Managed，受控的、可度量的生产模式；</li>
<li>Level 5: Optimizing，专注于改善的生产模式。</li>
</ul>

<h2 id="toc_27">用自己语言简述 SWEBok 或 CMMI</h2>

<p>SWEBoK 将软件开发所需要的只是分为了两大部分：软件工程实践以及教育需求。软件工程实践中的所需要的各种知识，包括软件开发生命周期，软件工程管理。教育需求则包含了数学、计算机以及工程基础。<br/>
每一个知识领域由介绍、描述性的主题以及次主题、推荐阅读等部分组成。附录中提供了一些常见标准。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试！]]></title>
    <link href="https://dennis273.github.io/15516788004554.html"/>
    <updated>2019-03-04T13:53:20+08:00</updated>
    <id>https://dennis273.github.io/15516788004554.html</id>
    <content type="html"><![CDATA[
<p>代码块测试</p>

<pre class="line-numbers"><code class="language-javascript">/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
Component.prototype.setState = function(partialState, callback) {
  invariant(
    typeof partialState === &#39;object&#39; ||
      typeof partialState === &#39;function&#39; ||
      partialState == null,
    &#39;setState(...): takes an object of state variables to update or a &#39; +
      &#39;function which returns an object of state variables.&#39;,
  );
  this.updater.enqueueSetState(this, partialState, callback, &#39;setState&#39;);
};
</code></pre>

]]></content>
  </entry>
  
</feed>
